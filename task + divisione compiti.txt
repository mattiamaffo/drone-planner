Ecco i passaggi da seguire per sviluppare il progetto, rispettando le regole fornite e la definizione del problema:

---

### **1. Analisi del problema**
- Studia attentamente il problema fornito, identificando i principali obiettivi e vincoli:
  - Monitorare tutte le 16 aree raccogliendo i 3 tipi di dati.
  - Ottimizzare l'uso dell'energia dei droni e minimizzare i tempi di ricarica.
  - Evitare collisioni e gestire dinamicamente aree inaccessibili.

---

### **2. Creazione del dominio PDDL**
- **Definizione degli oggetti**:
  - Aggiungi droni, stazioni base, aree e sensori.
- **Definizione dei predicati**:
  - Ad esempio:
    - `At(drone, posizione)`: Specifica dove si trova un drone.
    - `DataCollected(area, tipo_sensore)`: Indica che un certo dato è stato raccolto in un’area.
    - `EnergyLevel(drone, energia)`: Specifica il livello energetico del drone.
- **Definizione delle azioni**:
  - Crea azioni come `Move(drone, start, end)`, `CollectData(drone, area)`, e `Recharge(drone)` con relativi precondizioni ed effetti.
- **Vincoli aggiuntivi**:
  - Impedisci che più droni occupino la stessa posizione contemporaneamente.
  - Considera le aree inaccessibili.

---

### **3. Creazione dei problemi PDDL**
- Sviluppa almeno 3 problemi distinti:
  - Problema semplice (nessun vincolo meteorologico).
  - Problema con alcune aree bloccate.
  - Problema complesso che richiede molteplici ricariche e percorsi ottimizzati.
- Per ogni problema, specifica:
  - Stato iniziale (posizione iniziale dei droni, energia, ostacoli).
  - Stato finale desiderato (tutti i dati raccolti).

---

### **4. Test del dominio e dei problemi con un planner**
- **Planner PDDL**:
  - Utilizza almeno uno tra i planner studiati (es. Fast Downward o Metric-FF).
- **Euristiche**:
  - Confronta almeno due euristiche come richiesto:
    - Ad esempio, FF Heuristic e Relaxed Plan Graph Heuristic.
  - Analizza come le euristiche influenzano la qualità dei piani generati.
- Verifica che i piani rispettino i vincoli del problema.

---

### **5. Modellazione in Situation Calculus**
- **Definizione degli stati**:
  - Rappresenta il mondo usando fluents (es. posizione dei droni, livelli di energia).
- **Definizione delle azioni**:
  - Modellizza azioni come `move(drone, start, end)`, `collect_data(drone, area)`, e `recharge(drone)`.
- **Reasoning tasks**:
  - Identifica almeno 3 compiti di ragionamento:
    - Predire gli effetti delle azioni.
    - Verificare che un obiettivo sia raggiungibile.
    - Valutare piani alternativi in presenza di ostacoli.

---

### **6. Implementazione in Prolog**
- **Codifica del problema**:
  - Usa il linguaggio Golog per rappresentare il dominio.
  - Implementa azioni e stati in Prolog.
- **Reasoning**:
  - Risolvi i task di ragionamento formulati in Situation Calculus.
- **Validazione**:
  - Confronta i risultati di Prolog con quelli ottenuti dai planner PDDL.

_____________________________________________________________________________________________________________________

Ecco come suddividere i compiti in maniera bilanciata, sfruttando le competenze di entrambi i membri del team e favorendo la collaborazione:

---

### **Membro 1: Sviluppatore PDDL**
**Responsabilità principali:**
1. **Studio e creazione del dominio PDDL**:
   - Definire gli oggetti, predicati, azioni e vincoli richiesti.
   - Assicurarsi che il dominio rappresenti accuratamente il problema.
   - Documentare il dominio per facilitarne la comprensione.

2. **Sviluppo dei problemi PDDL**:
   - Creare almeno tre problemi distinti con diverse complessità.
   - Specificare lo stato iniziale e gli obiettivi di ciascun problema.
   - Testare i problemi nel dominio per verificarne la correttezza.

3. **Testing con planner**:
   - Utilizzare uno dei planner studiati (es. Fast Downward, Metric-FF).
   - Confrontare i piani generati usando almeno due euristiche diverse.
   - Documentare i risultati dei test e analizzare le differenze tra le euristiche.

---

### **Membro 2: Modellatore Situation Calculus e Prolog**
**Responsabilità principali:**
1. **Studio e modellazione in Situation Calculus**:
   - Rappresentare il dominio e i problemi usando fluents e azioni.
   - Definire gli stati iniziali e gli effetti delle azioni.
   - Identificare almeno tre reasoning tasks (es. predizione degli effetti delle azioni, verifica raggiungibilità obiettivi).

2. **Implementazione in Prolog**:
   - Tradurre il dominio e i reasoning tasks in codice Golog/Prolog.
   - Testare il funzionamento dei reasoning tasks.
   - Confrontare i risultati di Prolog con quelli ottenuti dai planner PDDL.

3. **Analisi e validazione**:
   - Assicurarsi che i piani generati in PDDL e Prolog siano coerenti.
   - Valutare i vantaggi e gli svantaggi delle due tecniche.

